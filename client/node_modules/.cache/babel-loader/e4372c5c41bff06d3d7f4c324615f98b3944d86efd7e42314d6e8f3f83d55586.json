{"ast":null,"code":"// client/src/features/analysisSlice.js\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = '/api/analysis';\n\n// Save a new analysis\nexport const saveAnalysis = createAsyncThunk('analysis/saveAnalysis', async ({\n  fileId,\n  xColumn,\n  yColumn,\n  chartType,\n  insights\n}, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    const res = await axios.post(API_URL, {\n      fileId,\n      xColumn,\n      yColumn,\n      chartType,\n      insights\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return res.data; // Saved analysis object\n  } catch (error) {\n    var _error$response, _error$response$data;\n    return thunkAPI.rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n  }\n});\n\n// Fetch user's analysis history\nexport const fetchMyAnalyses = createAsyncThunk('analysis/fetchMyAnalyses', async (_, thunkAPI) => {\n  try {\n    const token = thunkAPI.getState().auth.token;\n    const res = await axios.get(API_URL + '/my', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return res.data; // Array of analyses with populated file info\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    return thunkAPI.rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message);\n  }\n});\nconst analysisSlice = createSlice({\n  name: 'analysis',\n  initialState: {\n    analyses: [],\n    loading: false,\n    error: null,\n    successMessage: null\n  },\n  reducers: {\n    clearAnalysisState(state) {\n      state.loading = false;\n      state.error = null;\n      state.successMessage = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Save analysis\n    .addCase(saveAnalysis.pending, state => {\n      state.loading = true;\n      state.error = null;\n      state.successMessage = null;\n    }).addCase(saveAnalysis.fulfilled, (state, action) => {\n      state.loading = false;\n      state.analyses.unshift(action.payload); // add to front\n      state.successMessage = 'Analysis saved successfully.';\n    }).addCase(saveAnalysis.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || 'Analysis save failed.';\n    })\n\n    // Fetch analyses\n    .addCase(fetchMyAnalyses.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchMyAnalyses.fulfilled, (state, action) => {\n      state.loading = false;\n      state.analyses = action.payload;\n    }).addCase(fetchMyAnalyses.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || 'Failed to fetch analyses.';\n    });\n  }\n});\nexport const {\n  clearAnalysisState\n} = analysisSlice.actions;\nexport default analysisSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","saveAnalysis","fileId","xColumn","yColumn","chartType","insights","thunkAPI","token","getState","auth","res","post","headers","Authorization","data","error","_error$response","_error$response$data","rejectWithValue","response","message","fetchMyAnalyses","_","get","_error$response2","_error$response2$data","analysisSlice","name","initialState","analyses","loading","successMessage","reducers","clearAnalysisState","state","extraReducers","builder","addCase","pending","fulfilled","action","unshift","payload","rejected","actions","reducer"],"sources":["C:/Users/lenovo/Desktop/excel/client/src/features/analysisSlice.js"],"sourcesContent":["// client/src/features/analysisSlice.js\r\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = '/api/analysis';\r\n\r\n// Save a new analysis\r\nexport const saveAnalysis = createAsyncThunk(\r\n  'analysis/saveAnalysis',\r\n  async ({ fileId, xColumn, yColumn, chartType, insights }, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.token;\r\n      const res = await axios.post(\r\n        API_URL,\r\n        { fileId, xColumn, yColumn, chartType, insights },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      return res.data; // Saved analysis object\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(\r\n        error.response?.data?.message || error.message\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\n// Fetch user's analysis history\r\nexport const fetchMyAnalyses = createAsyncThunk(\r\n  'analysis/fetchMyAnalyses',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const token = thunkAPI.getState().auth.token;\r\n      const res = await axios.get(API_URL + '/my', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      return res.data; // Array of analyses with populated file info\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(\r\n        error.response?.data?.message || error.message\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nconst analysisSlice = createSlice({\r\n  name: 'analysis',\r\n  initialState: {\r\n    analyses: [],\r\n    loading: false,\r\n    error: null,\r\n    successMessage: null,\r\n  },\r\n  reducers: {\r\n    clearAnalysisState(state) {\r\n      state.loading = false;\r\n      state.error = null;\r\n      state.successMessage = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Save analysis\r\n      .addCase(saveAnalysis.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n        state.successMessage = null;\r\n      })\r\n      .addCase(saveAnalysis.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.analyses.unshift(action.payload); // add to front\r\n        state.successMessage = 'Analysis saved successfully.';\r\n      })\r\n      .addCase(saveAnalysis.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload || 'Analysis save failed.';\r\n      })\r\n\r\n      // Fetch analyses\r\n      .addCase(fetchMyAnalyses.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchMyAnalyses.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.analyses = action.payload;\r\n      })\r\n      .addCase(fetchMyAnalyses.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload || 'Failed to fetch analyses.';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearAnalysisState } = analysisSlice.actions;\r\n\r\nexport default analysisSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}